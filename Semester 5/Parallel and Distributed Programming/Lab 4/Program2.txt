using System;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

class HttpDownloader
{
    private Task ConnectAsync(Socket socket, string host, int port)
    {
        return Task.Factory.FromAsync(socket.BeginConnect, socket.EndConnect, host, port, null);
    }

    private Task<int> SendAsync(Socket socket, byte[] buffer)
    {
        return Task.Factory.FromAsync(socket.BeginSend, socket.EndSend, buffer, 0, buffer.Length, SocketFlags.None, null);
    }

    private Task<int> ReceiveAsync(Socket socket, byte[] buffer)
    {
        return Task.Factory.FromAsync(socket.BeginReceive, socket.EndReceive, buffer, 0, buffer.Length, SocketFlags.None, null);
    }

    public async Task DownloadFile(string host, string path, string outputFilePath)
    {
        var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

        try
        {
            await ConnectAsync(socket, host, 80);

            string request = $"GET {path} HTTP/1.1\r\nHost: {host}\r\nConnection: Close\r\n\r\n";
            byte[] requestBytes = Encoding.ASCII.GetBytes(request);
            await SendAsync(socket, requestBytes);

            byte[] buffer = new byte[8192];
            int received;
            bool headersParsed = false;
            StringBuilder headers = new StringBuilder();
            using var fileStream = new FileStream(outputFilePath, FileMode.Create);

            while ((received = await ReceiveAsync(socket, buffer)) > 0)
            {
                string responsePart = Encoding.ASCII.GetString(buffer, 0, received);

                if (!headersParsed)
                {
                    headers.Append(responsePart);
                    int headerEndIndex = headers.ToString().IndexOf("\r\n\r\n");
                    if (headerEndIndex >= 0)
                    {
                        headersParsed = true;
                        Console.WriteLine("Headers:\n" + headers.ToString(0, headerEndIndex) + "\n");

                        int bodyStartIndex = headerEndIndex + 4;
                        fileStream.Write(buffer, bodyStartIndex, received - bodyStartIndex);
                    }
                }
                else
                {
                    fileStream.Write(buffer, 0, received);
                }
            }

            Console.WriteLine($"File downloaded successfully to: {outputFilePath}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        finally
        {
            socket.Close();
        }
    }
}

class Program
{
    static async Task Main(string[] args)
    {
        string host = "httpbin.org";
        string path = "/html";
        string outputFilePath = "downloaded_file_task.html";

        Console.WriteLine($"Downloading {path} from {host} using task-based approach...");
        var downloader = new HttpDownloader();
        await downloader.DownloadFile(host, path, outputFilePath);
    }
}
